import React, { useState, useEffect, useRef } from 'react';
import './App.css';
import { useFetch } from './hooks/useFetch';

function App() {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã –±—É–¥–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
  const [form, setForm] = useState({});
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [autoSpeakFields, setAutoSpeakFields] = useState(true);
  const [currentField, setCurrentField] = useState('');
  const speechSynth = useRef(null);

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã —Å API
  const { isLoading, data: formFields, error } = useFetch('/api/form/1/questions/');

  // –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ–∑–≤—É—á–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  const optionLabels = {
    disabilityGroup: {
      '': '–ù–µ –≤—ã–±—Ä–∞–Ω–æ',
      '1': '–ü–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏',
      '2': '–í—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏',
      '3': '–¢—Ä–µ—Ç—å—è –≥—Ä—É–ø–ø–∞ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏',
      'child': '–†–µ–±–µ–Ω–æ–∫ –∏–Ω–≤–∞–ª–∏–¥',
      'none': '–ù–µ—Ç –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏'
    },
    disabilityForm: {
      '': '–ù–µ –≤—ã–±—Ä–∞–Ω–æ',
      'vision': '–ù–∞—Ä—É—à–µ–Ω–∏–µ –∑—Ä–µ–Ω–∏—è',
      'hearing': '–ù–∞—Ä—É—à–µ–Ω–∏–µ —Å–ª—É—Ö–∞',
      'mobility': '–ù–∞—Ä—É—à–µ–Ω–∏–µ –æ–ø–æ—Ä–Ω–æ-–¥–≤–∏–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞–ø–ø–∞—Ä–∞—Ç–∞',
      'intellectual': '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è',
      'mental': '–ü—Å–∏—Ö–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è',
      'multiple': '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è'
    },
    education: {
      '': '–ù–µ –≤—ã–±—Ä–∞–Ω–æ',
      'secondary': '–°—Ä–µ–¥–Ω–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
      'secondary-special': '–°—Ä–µ–¥–Ω–µ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
      'incomplete-higher': '–ù–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ –≤—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
      'higher': '–í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
      'bachelor': '–ë–∞–∫–∞–ª–∞–≤—Ä',
      'master': '–ú–∞–≥–∏—Å—Ç—Ä',
      'phd': '–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞—É–∫',
      'doctor': '–î–æ–∫—Ç–æ—Ä –Ω–∞—É–∫'
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (formFields && formFields.length > 0) {
      const initialForm = {};
      formFields.forEach(field => {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        initialForm[field.text] = field.default_value || '';
      });
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ —Å–æ–≥–ª–∞—Å–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ
      initialForm.consent = false;
      setForm(initialForm);
    }
  }, [formFields]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
  useEffect(() => {
    speechSynth.current = window.speechSynthesis;

    if (!speechSynth.current) {
      console.warn('Web Speech API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
      alert('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–∑–≤—É—á–∫—É —Ç–µ–∫—Å—Ç–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Chrome –∏–ª–∏ Edge.');
    }

    return () => {
      stopSpeech();
    };
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
  const handleInputChange = (fieldName, value) => {
    setForm(prev => ({
      ...prev,
      [fieldName]: value
    }));
  };

  // –û–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç–∞
  const speakText = (text) => {
    if (!speechSynth.current || isSpeaking) return;

    stopSpeech();

    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = 'ru-RU';
    utterance.rate = 0.8;
    utterance.pitch = 1;
    utterance.volume = 1;

    utterance.onstart = () => {
      setIsSpeaking(true);
    };

    utterance.onend = () => {
      setIsSpeaking(false);
    };

    utterance.onerror = () => {
      setIsSpeaking(false);
    };

    speechSynth.current.speak(utterance);
  };

  // –û–∑–≤—É—á–∫–∞ –ø–æ–ª—è
  const speakField = (fieldName) => {
    setCurrentField(fieldName);
    speakText(`–ü–æ–ª–µ: ${fieldName}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –≤–≤–µ—Ä—Ö –∏ –≤–Ω–∏–∑ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞.`);
  };

  // –ê–≤—Ç–æ–æ–∑–≤—É—á–∫–∞ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
  const autoSpeakField = (fieldName) => {
    if (autoSpeakFields) {
      speakField(fieldName);
    }
  };

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∑–≤—É—á–∫–∏
  const stopSpeech = () => {
    if (speechSynth.current) {
      speechSynth.current.cancel();
    }
    setIsSpeaking(false);
  };

  const speakCurrentField = () => {
    if (currentField) {
      speakField(currentField);
    }
  };

  const speakAllForm = () => {
    if (!formFields || formFields.length === 0) return;
    
    const fieldsDescription = formFields
      .map(field => field.label || field.text)
      .join(', ');
    
    const formDescription = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–∫–µ—Ç—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏. 
      –§–æ—Ä–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è: ${fieldsDescription}.
      –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–æ–º–µ—á–µ–Ω—ã –∑–≤–µ–∑–¥–æ—á–∫–æ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Tab –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.`;
    
    speakText(formDescription);
  };

  // –û–∑–≤—É—á–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
  const speakSelectedOption = (fieldName, value) => {
    const label = optionLabels[fieldName]?.[value] || value;
    speakText(`–í—ã–±—Ä–∞–Ω–æ: ${label}`);
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
  const submitForm = (e) => {
    e.preventDefault();
    
    if (!form.consent) {
      alert('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
      speakText('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
      return;
    }

    console.log('–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', form);
    speakText('–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É.');
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    // await submitFormToServer(form);
  };

  // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
  const resetForm = () => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø–æ–ª—è?')) {
      const emptyForm = {};
      if (formFields && formFields.length > 0) {
        formFields.forEach(field => {
          emptyForm[field.text] = field.default_value || '';
        });
      }
      emptyForm.consent = false;
      
      setForm(emptyForm);
      speakText('–§–æ—Ä–º–∞ –æ—á–∏—â–µ–Ω–∞. –í—Å–µ –ø–æ–ª—è —Å–±—Ä–æ—à–µ–Ω—ã.');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ø–æ–ª—è –ø–æ —Ç–∏–ø—É
  const renderFieldByType = (field) => {
    const commonProps = {
      id: field.text,
      value: form[field.text] || '',
      onChange: (e) => handleInputChange(field.text, e.target.value),
      required: field.required || false,
      onFocus: () => autoSpeakField(field.label || field.text),
      placeholder: field.hint || '',
      'aria-describedby': field.help_text ? `${field.text}-help` : undefined,
    };

    switch (field.q_type) {
      case 'textarea':
        return (
          <textarea
            {...commonProps}
            rows={field.rows || 3}
            className="form-textarea"
          />
        );

      case 'select':
        //   console.log('üîç Select field data:', field);
        //     console.log('üìã Options list:', field.options_list);
        //     console.log('üìã Options list type:', typeof field.options_list);

        return (
          <select
            {...commonProps}
            className="form-select"
            onChange={(e) => {
              handleInputChange(field.text, e.target.value);
              // –û–∑–≤—É—á–∫–∞ –¥–ª—è select –ø–æ–ª–µ–π
              if (optionLabels[field.text]) {
                speakSelectedOption(field.text, e.target.value);
              }
            }}
          >

            <pre>{JSON.stringify(field.options_list, null, 2)}</pre>

            <option value="">{field.hint || '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç'}</option>
            {field.options_list?.map((option, index) => (
              <option 
                    key={index} 
                    value={ option}
              >
                { option}
              </option>
            ))}
          </select>
        );

      case 'checkbox':
        return (
          <input
            type="checkbox"
            {...commonProps}
            checked={!!form[field.text]}
            onChange={(e) => handleInputChange(field.text, e.target.checked)}
            className="form-checkbox"
          />
        );

      case 'date':
        return (
          <input
            type="date"
            {...commonProps}
            className="form-input"
          />
        );

      case 'email':
        return (
          <input
            type="email"
            {...commonProps}
            className="form-input"
          />
        );

      case 'tel':
        return (
          <input
            type="tel"
            {...commonProps}
            pattern={field.pattern}
            className="form-input"
          />
        );

      case 'url':
        return (
          <input
            type="url"
            {...commonProps}
            className="form-input"
          />
        );

      default:
        return (
          <input
            type="text"
            {...commonProps}
            className="form-input"
          />
        );
    }
  };

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—ã –ë–ï–ó –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
  const renderDynamicForm = () => {
    if (!formFields || formFields.length === 0) {
      return <p className="no-data">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º—ã</p>;
    }

    // –†–µ–Ω–¥–µ—Ä–∏–º –≤—Å–µ –ø–æ–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –±–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ —Å–µ–∫—Ü–∏—è–º
    return formFields.map((field) => (
      <div key={field.text || field.id} className="form-group">
        <label 
          htmlFor={field.text}
          onMouseEnter={() => speakField(field.label || field.text)}
          className="form-label"
        >
          {field.label || field.text}
          {field.required && <span className="required-star"> *</span>}
        </label>
        
        {renderFieldByType(field)}
        
        {field.help_text && (
          <div 
            id={`${field.text}-help`} 
            className="help-text"
          >
            {field.help_text}
          </div>
        )}
      </div>
    ));
  };

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–∫–∏
  if (isLoading) {
    return (
      <div className="container">
        <div className="loading-state">
          <div className="spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ä–º—ã...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container">
        <div className="error-state">
          <h2>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ä–º—ã</h2>
          <p>{error}</p>
          <button 
            onClick={() => window.location.reload()} 
            className="retry-btn"
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="container">
      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∑–≤—É—á–∫–æ–π */}
      <div className="voice-controls-wrap">
        <div className="voice-controls">
            <button 
            onClick={speakAllForm} 
            className="voice-btn" 
            disabled={isSpeaking}
            >
            –û–∑–≤—É—á–∏—Ç—å –≤—Å—é —Ñ–æ—Ä–º—É
            </button>
            <button 
            onClick={stopSpeech} 
            className="voice-btn stop" 
            disabled={!isSpeaking}
            >
            –°—Ç–æ–ø
            </button>
            <button 
            onClick={speakCurrentField} 
            className="voice-btn" 
            disabled={!currentField}
            >
            –ü–æ–≤—Ç–æ—Ä –ø–æ–ª—è
            </button>
        </div>
        <label className="voice-toggle">
          <input 
            type="checkbox" 
            checked={autoSpeakFields}
            onChange={(e) => setAutoSpeakFields(e.target.checked)}
          />
          –ê–≤—Ç–æ–æ–∑–≤—É—á–∫–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        </label>
      </div>

      <form onSubmit={submitForm} className="accessibility-form">
        <h1>–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ</h1>

        {/* –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö API –ë–ï–ó –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ */}
        {renderDynamicForm()}

        {/* –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö */}
        {/* <div className="form-group consent">
          <label className="checkbox-label">
            <input 
              type="checkbox" 
              checked={form.consent || false}
              onChange={(e) => handleInputChange('consent', e.target.checked)}
              required
              onFocus={() => autoSpeakField('–ü—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')}
              className="consent-checkbox"
            />
            <span 
              onMouseEnter={() => speakField('–ü—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')}
              className="consent-text"
            >
              * –ü—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            </span>
          </label>
        </div> */}

        {/* –ö–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
        <div className="form-actions">
          <button 
            type="submit" 
            className="submit-btn" 
            disabled={!form.consent} 
            onMouseOver={() => speakField('–∫–Ω–æ–ø–∫–∞ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É')}
          >
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É
          </button>
          <button 
            type="button" 
            onClick={resetForm} 
            className="reset-btn"
            onMouseOver={() => speakField('–∫–Ω–æ–ø–∫–∞ –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É')}
          >
            –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
          </button>
        </div>
      </form>
    </div>
  );
}

export default App;