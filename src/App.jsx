import React, { useState, useEffect, useRef } from 'react'
import './App.css'
import { useFetch } from './hooks/useFetch'

function App() {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
  const [form, setForm] = useState({
    fullName: '',
    city: '',
    district: '',
    birthDate: '',
    request: '',
    requestComments: '',
    phone: '',
    disabilityGroup: '',
    disabilityForm: '',
    education: '',
    educationDetails: '',
    training: '',
    email: '',
    additionalInfo: '',
    vk: '',
    telegram: '',
    consent: false
  })

  const [isSpeaking, setIsSpeaking] = useState(false)
  const [autoSpeakFields, setAutoSpeakFields] = useState(true)
  const [currentField, setCurrentField] = useState('')
  const speechSynth = useRef(null)

  // –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ–∑–≤—É—á–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  const optionLabels = {
    disabilityGroup: {
      '': '–ù–µ –≤—ã–±—Ä–∞–Ω–æ',
      '1': '–ü–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏',
      '2': '–í—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏',
      '3': '–¢—Ä–µ—Ç—å—è –≥—Ä—É–ø–ø–∞ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏',
      'child': '–†–µ–±–µ–Ω–æ–∫ –∏–Ω–≤–∞–ª–∏–¥',
      'none': '–ù–µ—Ç –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏'
    },
    disabilityForm: {
      '': '–ù–µ –≤—ã–±—Ä–∞–Ω–æ',
      'vision': '–ù–∞—Ä—É—à–µ–Ω–∏–µ –∑—Ä–µ–Ω–∏—è',
      'hearing': '–ù–∞—Ä—É—à–µ–Ω–∏–µ —Å–ª—É—Ö–∞',
      'mobility': '–ù–∞—Ä—É—à–µ–Ω–∏–µ –æ–ø–æ—Ä–Ω–æ-–¥–≤–∏–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞–ø–ø–∞—Ä–∞—Ç–∞',
      'intellectual': '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è',
      'mental': '–ü—Å–∏—Ö–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è',
      'multiple': '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è'
    },
    education: {
      '': '–ù–µ –≤—ã–±—Ä–∞–Ω–æ',
      'secondary': '–°—Ä–µ–¥–Ω–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
      'secondary-special': '–°—Ä–µ–¥–Ω–µ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
      'incomplete-higher': '–ù–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ –≤—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
      'higher': '–í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
      'bachelor': '–ë–∞–∫–∞–ª–∞–≤—Ä',
      'master': '–ú–∞–≥–∏—Å—Ç—Ä',
      'phd': '–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞—É–∫',
      'doctor': '–î–æ–∫—Ç–æ—Ä –Ω–∞—É–∫'
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  useEffect(() => {
    speechSynth.current = window.speechSynthesis

    if (!speechSynth.current) {
      console.warn('Web Speech API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ')
      alert('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–∑–≤—É—á–∫—É —Ç–µ–∫—Å—Ç–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Chrome –∏–ª–∏ Edge.')
    }

    return () => {
      stopSpeech()
    }
  }, [])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
  const handleInputChange = (field, value) => {
    setForm(prev => ({
      ...prev,
      [field]: value
    }))
  }

  // –û–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç–∞
  const speakText = (text) => {
    if (!speechSynth.current || isSpeaking) return

    stopSpeech()

    const utterance = new SpeechSynthesisUtterance(text)
    utterance.lang = 'ru-RU'
    utterance.rate = 0.8
    utterance.pitch = 1
    utterance.volume = 1

    utterance.onstart = () => {
      setIsSpeaking(true)
    }

    utterance.onend = () => {
      setIsSpeaking(false)
    }

    utterance.onerror = () => {
      setIsSpeaking(false)
    }

    speechSynth.current.speak(utterance)
  }

  // –û–∑–≤—É—á–∫–∞ –ø–æ–ª—è
  const speakField = (fieldName) => {
    setCurrentField(fieldName)
    speakText(`–ü–æ–ª–µ: ${fieldName}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –≤–≤–µ—Ä—Ö –∏ –≤–Ω–∏–∑ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞.`)
  }

  // –ê–≤—Ç–æ–æ–∑–≤—É—á–∫–∞ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
  const autoSpeakField = (fieldName) => {
    if (autoSpeakFields) {
      speakField(fieldName)
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∑–≤—É—á–∫–∏
  const stopSpeech = () => {
    if (speechSynth.current) {
      speechSynth.current.cancel()
    }
    setIsSpeaking(false)
  }

  const speakCurrentField = () => {
    if (currentField) {
      speakField(currentField)
    }
  }

  const speakAllForm = () => {
    const formDescription = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–∫–µ—Ç—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏. 
      –§–æ—Ä–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–µ–¥—É—é—â–∏–µ:
      –±–ª–æ–∫ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–ª—è–º–∏
      –§–ò–û —Ñ–∞–º–∏–ª–∏—è –∏–º—è –æ—Ç—á–µ—Å—Ç–≤–æ, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è, –¢–µ–ª–µ—Ñ–æ–Ω, –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞, –ì–æ—Ä–æ–¥, –†–∞–π–æ–Ω,  
      –±–ª–æ–∫ –í–∞—à –∑–∞–ø—Ä–æ—Å  —Å –ø–æ–ª—è–º–∏
      –í–∞—à –∑–∞–ø—Ä–æ—Å, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–ø—Ä–æ—Å—É, 
      –±–ª–æ–∫ –í–∞—à–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å –ø–æ–ª—è–º–∏
      –ì—Ä—É–ø–ø–∞ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏, –§–æ—Ä–º–∞ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏, 
      –±–ª–æ–∫ –í–∞—à–∏ –í–∞—à–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å –ø–æ–ª—è–º–∏
      –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, 
      –û–±—É—á–µ–Ω–∏–µ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å,  
      –±–ª–æ–∫ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å –ø–æ–ª—è–º–∏
      –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, 
      –°—Ç—Ä–∞–Ω–∏—Ü–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, –ù–∏–∫ –≤ –¢–µ–ª–µ–≥—Ä–∞–º, 
      –∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö.
      –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–æ–º–µ—á–µ–Ω—ã –∑–≤–µ–∑–¥–æ—á–∫–æ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Tab –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.`
    speakText(formDescription)
  }

  // –û–∑–≤—É—á–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
  const speakSelectedOption = (fieldName, value) => {
    const label = optionLabels[fieldName]?.[value] || value
    speakText(`–í—ã–±—Ä–∞–Ω–æ: ${label}`)
  }

  const submitForm = (e) => {
    e.preventDefault()
    
    if (!form.consent) {
      alert('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
      return
    }

    console.log('–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', form)
    speakText('–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É.')
  }

  const resetForm = () => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø–æ–ª—è?')) {
      setForm({
        fullName: '',
        city: '',
        district: '',
        birthDate: '',
        request: '',
        requestComments: '',
        phone: '',
        disabilityGroup: '',
        disabilityForm: '',
        education: '',
        educationDetails: '',
        training: '',
        email: '',
        additionalInfo: '',
        vk: '',
        telegram: '',
        consent: false
      })
      speakText('–§–æ—Ä–º–∞ –æ—á–∏—â–µ–Ω–∞. –í—Å–µ –ø–æ–ª—è —Å–±—Ä–æ—à–µ–Ω—ã.')
    }
  }

  const {isLoading, data, error} = useFetch('/api/form/1/questions/')
  
  if(isLoading){
    return <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
  }
  if(error){
    return <p>{error}</p>
  }

  return (
    <div className="container">
      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∑–≤—É—á–∫–æ–π */}
      <div className="voice-controls">
        <button 
          onClick={speakAllForm} 
          className="voice-btn" 
          disabled={isSpeaking}
        >
          üîä –û–∑–≤—É—á–∏—Ç—å –≤—Å—é —Ñ–æ—Ä–º—É
        </button>
        <button 
          onClick={stopSpeech} 
          className="voice-btn stop" 
          disabled={!isSpeaking}
        >
          ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        </button>
        <button 
          onClick={speakCurrentField} 
          className="voice-btn" 
          disabled={!currentField}
        >
          üé§ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ª–µ
        </button>
        <label className="voice-toggle">
          <input 
            type="checkbox" 
            checked={autoSpeakFields}
            onChange={(e) => setAutoSpeakFields(e.target.checked)}
          />
          –ê–≤—Ç–æ–æ–∑–≤—É—á–∫–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        </label>
      </div>

      <form onSubmit={submitForm} className="accessibility-form">
        <h1>–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ</h1>

        <fieldset>
          <legend onMouseOver={() => speakField('–±–ª–æ–∫ —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏')}>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</legend>
          {/* –§–ò–û */}
          <div className="form-group">
            <label 
              htmlFor="fullName" 
              onMouseEnter={() => speakField('–≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ —Ñ–∞–º–∏–ª–∏—é –∏–º—è –æ—Ç—á–µ—Å—Ç–≤–æ')}
            >
              –§–ò–û *
            </label>
            <input 
              id="fullName" 
              value={form.fullName} 
              onChange={(e) => handleInputChange('fullName', e.target.value)}
              type="text" 
              required 
              onFocus={() => autoSpeakField('–§–ò–û')}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è" 
            />
          </div>
          
          {/* –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è */}
          <div className="form-group">
            <label 
              htmlFor="birthDate" 
              onMouseEnter={() => speakField('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è')}
            >
              –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
            </label>
            <input 
              id="birthDate" 
              value={form.birthDate} 
              onChange={(e) => handleInputChange('birthDate', e.target.value)}
              type="date" 
              onFocus={() => autoSpeakField('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è')} 
            />
          </div>
          
          {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
          <div className="form-group">
            <label 
              htmlFor="phone" 
              onMouseEnter={() => speakField('–¢–µ–ª–µ—Ñ–æ–Ω, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')}
            >
              * –¢–µ–ª–µ—Ñ–æ–Ω
            </label>
            <input 
              id="phone" 
              value={form.phone} 
              onChange={(e) => handleInputChange('phone', e.target.value)}
              type="tel" 
              required 
              onFocus={() => autoSpeakField('–¢–µ–ª–µ—Ñ–æ–Ω')}
              placeholder="+7 (XXX) XXX-XX-XX"
              pattern="\+7\s?[\(]{0,1}[0-9]{3}[\)]{0,1}\s?\d{3}[-]{0,1}\d{2}[-]{0,1}\d{2}" 
            />
          </div>
          
          {/* –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ */}
          <div className="form-group">
            <label 
              htmlFor="email" 
              onMouseEnter={() => speakField('–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞')}
            >
              –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞
            </label>
            <input 
              id="email" 
              value={form.email} 
              onChange={(e) => handleInputChange('email', e.target.value)}
              type="email" 
              onFocus={() => autoSpeakField('–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞')}
              placeholder="example@mail.ru" 
            />
          </div>

          {/* –ì–æ—Ä–æ–¥ –∏ —Ä–∞–π–æ–Ω */}
          <div className="form-group">
            <label 
              htmlFor="city" 
              onMouseEnter={() => speakField('–ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è')}
            >
              –ì–æ—Ä–æ–¥
            </label>
            <input 
              id="city" 
              value={form.city} 
              onChange={(e) => handleInputChange('city', e.target.value)}
              type="text" 
              onFocus={() => autoSpeakField('–ì–æ—Ä–æ–¥')}
              placeholder="–í–∞—à –≥–æ—Ä–æ–¥" 
            />
          </div>
          
          <div className="form-group">
            <label 
              htmlFor="district" 
              onMouseEnter={() => speakField('–†–∞–π–æ–Ω –≥–æ—Ä–æ–¥–∞')}
            >
              –†–∞–π–æ–Ω
            </label>
            <input 
              id="district" 
              value={form.district} 
              onChange={(e) => handleInputChange('district', e.target.value)}
              type="text" 
              onFocus={() => autoSpeakField('–†–∞–π–æ–Ω')}
              placeholder="–†–∞–π–æ–Ω –≥–æ—Ä–æ–¥–∞" 
            />
          </div>
        </fieldset>

        <fieldset>
          <legend onMouseOver={() => speakField('–±–ª–æ–∫ –í–∞—à –∑–∞–ø—Ä–æ—Å')}>–í–∞—à –∑–∞–ø—Ä–æ—Å</legend>
          {/* –í–∞—à –∑–∞–ø—Ä–æ—Å */}
          <div className="form-group">
            <label 
              htmlFor="request" 
              onMouseEnter={() => speakField('–í–∞—à –∑–∞–ø—Ä–æ—Å, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')}
            >
              * –í–∞—à –∑–∞–ø—Ä–æ—Å
            </label>
            <textarea 
              id="request" 
              value={form.request} 
              onChange={(e) => handleInputChange('request', e.target.value)}
              required 
              onFocus={() => autoSpeakField('–í–∞—à –∑–∞–ø—Ä–æ—Å')}
              placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å" 
              rows="3"
            />
          </div>

          {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–ø—Ä–æ—Å—É */}
          <div className="form-group">
            <label 
              htmlFor="requestComments" 
              onMouseEnter={() => speakField('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–ø—Ä–æ—Å—É')}
            >
              –í–∞—à –∑–∞–ø—Ä–æ—Å. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            </label>
            <textarea 
              id="requestComments" 
              value={form.requestComments} 
              onChange={(e) => handleInputChange('requestComments', e.target.value)}
              onFocus={() => autoSpeakField('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–ø—Ä–æ—Å—É')} 
              placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
              rows="2"
            />
          </div>
        </fieldset>

        <fieldset>
          <legend onMouseOver={() => speakField('–±–ª–æ–∫ –í–∞—à–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏')}>–í–∞—à–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏</legend>
          
          {/* –ì—Ä—É–ø–ø–∞ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ */}
          <div className="form-group">
            <label 
              htmlFor="disabilityGroup" 
              onMouseEnter={() => speakField('–ì—Ä—É–ø–ø–∞ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')}
            >
              * –ì—Ä—É–ø–ø–∞ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
            </label>
            <select 
              id="disabilityGroup" 
              value={form.disabilityGroup} 
              onChange={(e) => {
                handleInputChange('disabilityGroup', e.target.value)
                speakSelectedOption('disabilityGroup', e.target.value)
              }}
              required
              onFocus={() => autoSpeakField('–ì—Ä—É–ø–ø–∞ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞')}
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É</option>
              <option value="1">1 –≥—Ä—É–ø–ø–∞</option>
              <option value="2">2 –≥—Ä—É–ø–ø–∞</option>
              <option value="3">3 –≥—Ä—É–ø–ø–∞</option>
              <option value="child">–†–µ–±–µ–Ω–æ–∫-–∏–Ω–≤–∞–ª–∏–¥</option>
              <option value="none">–ù–µ—Ç –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏</option>
            </select>
          </div>

          {/* –§–æ—Ä–º–∞ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ */}
          <div className="form-group">
            <label 
              htmlFor="disabilityForm" 
              onMouseEnter={() => speakField('–§–æ—Ä–º–∞ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')}
            >
              * –§–æ—Ä–º–∞ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
            </label>
            <select 
              id="disabilityForm" 
              value={form.disabilityForm} 
              onChange={(e) => {
                handleInputChange('disabilityForm', e.target.value)
                speakSelectedOption('disabilityForm', e.target.value)
              }}
              required
              onFocus={() => autoSpeakField('–§–æ—Ä–º–∞ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞')}
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É</option>
              <option value="vision">–ù–∞—Ä—É—à–µ–Ω–∏–µ –∑—Ä–µ–Ω–∏—è</option>
              <option value="hearing">–ù–∞—Ä—É—à–µ–Ω–∏–µ —Å–ª—É—Ö–∞</option>
              <option value="mobility">–ù–∞—Ä—É—à–µ–Ω–∏–µ –æ–ø–æ—Ä–Ω–æ-–¥–≤–∏–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞–ø–ø–∞—Ä–∞—Ç–∞</option>
              <option value="intellectual">–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è</option>
              <option value="mental">–ü—Å–∏—Ö–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è</option>
              <option value="multiple">–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è</option>
            </select>
          </div>
        </fieldset>

        <fieldset>
          <legend onMouseOver={() => speakField('–±–ª–æ–∫ –í–∞—à–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ')}>–í–∞—à–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</legend>

          {/* –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ */}
          <div className="form-group">
            <label 
              htmlFor="education" 
              onMouseEnter={() => speakField('–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ')}
            >
              * –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
            </label>
            <select 
              id="education" 
              value={form.education} 
              onChange={(e) => {
                handleInputChange('education', e.target.value)
                speakSelectedOption('education', e.target.value)
              }}
              required
              onFocus={() => autoSpeakField('–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞')}
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</option>
              <option value="secondary">–°—Ä–µ–¥–Ω–µ–µ</option>
              <option value="secondary-special">–°—Ä–µ–¥–Ω–µ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ</option>
              <option value="incomplete-higher">–ù–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ –≤—ã—Å—à–µ–µ</option>
              <option value="higher">–í—ã—Å—à–µ–µ</option>
              <option value="bachelor">–ë–∞–∫–∞–ª–∞–≤—Ä</option>
              <option value="master">–ú–∞–≥–∏—Å—Ç—Ä</option>
              <option value="phd">–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞—É–∫</option>
              <option value="doctor">–î–æ–∫—Ç–æ—Ä –Ω–∞—É–∫</option>
            </select>
          </div>

          {/* –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è */}
          <div className="form-group">
            <label 
              htmlFor="educationDetails" 
              onMouseEnter={() => speakField('–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è')}
            >
              –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
            </label>
            <input 
              id="educationDetails" 
              value={form.educationDetails} 
              onChange={(e) => handleInputChange('educationDetails', e.target.value)}
              type="text"
              onFocus={() => autoSpeakField('–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è')}
              placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏" 
            />
          </div>

          {/* –û–±—É—á–µ–Ω–∏–µ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å */}
          <div className="form-group">
            <label 
              htmlFor="training" 
              onMouseEnter={() => speakField('–ì–¥–µ –∏ —á–µ–º—É –æ–±—É—á–∞–ª–∏—Å—å, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, –∫—É—Ä—Å—ã')}
            >
              –ì–¥–µ –∏ —á–µ–º—É –æ–±—É—á–∞–ª–∏—Å—å. –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å. –ö—É—Ä—Å—ã
            </label>
            <textarea 
              id="training" 
              value={form.training} 
              onChange={(e) => handleInputChange('training', e.target.value)}
              onFocus={() => autoSpeakField('–û–±—É—á–µ–Ω–∏–µ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å')}
              placeholder="–£—á–µ–±–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è, –∫—É—Ä—Å—ã, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏" 
              rows="3"
            />
          </div>
        </fieldset>

        <fieldset>
          <legend onMouseOver={() => speakField('–±–ª–æ–∫ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')}>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</legend>
          
          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="form-group">
            <label 
              htmlFor="additionalInfo" 
              onMouseEnter={() => speakField('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')}
            >
              –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            </label>
            <textarea 
              id="additionalInfo" 
              value={form.additionalInfo} 
              onChange={(e) => handleInputChange('additionalInfo', e.target.value)}
              onFocus={() => autoSpeakField('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')} 
              placeholder="–õ—é–±–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
              rows="3"
            />
          </div>

          {/* –°—Ç—Ä–∞–Ω–∏—Ü–∞ –í–ö */}
          <div className="form-group">
            <label 
              htmlFor="vk" 
              onMouseEnter={() => speakField('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ')}
            >
              –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –í–ö
            </label>
            <input 
              id="vk" 
              value={form.vk} 
              onChange={(e) => handleInputChange('vk', e.target.value)}
              type="url" 
              onFocus={() => autoSpeakField('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ')}
              placeholder="https://vk.com/username" 
            />
          </div>

          {/* –¢–µ–ª–µ–≥—Ä–∞–º */}
          <div className="form-group">
            <label 
              htmlFor="telegram" 
              onMouseEnter={() => speakField('–ù–∏–∫ –≤ –¢–µ–ª–µ–≥—Ä–∞–º')}
            >
              –ù–∏–∫ –≤ –¢–µ–ª–µ–≥—Ä–∞–º
            </label>
            <input 
              id="telegram" 
              value={form.telegram} 
              onChange={(e) => handleInputChange('telegram', e.target.value)}
              type="text" 
              onFocus={() => autoSpeakField('–ù–∏–∫ –≤ –¢–µ–ª–µ–≥—Ä–∞–º')}
              placeholder="@username" 
            />
          </div>
        </fieldset>

        {/* –°–æ–≥–ª–∞—Å–∏–µ */}
        <div className="form-group consent">
          <label className="checkbox-label">
            <input 
              type="checkbox" 
              checked={form.consent}
              onChange={(e) => handleInputChange('consent', e.target.checked)}
              required
              onFocus={() => autoSpeakField('–ü—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')} 
            />
            <span onMouseEnter={() => speakField('–ü—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')}>
              * –ü—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            </span>
          </label>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
        <div className="form-actions">
          <button type="submit" className="submit-btn" disabled={!form.consent} onMouseOver={() => speakField('–∫–Ω–æ–ø–∫–∞ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É')}>
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É
          </button>
          <button type="button" onClick={resetForm} className="reset-btn" onMouseOver={() => speakField('–∫–Ω–æ–ø–∫–∞  –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É')}>
            –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
          </button>
        </div>
      </form>
    </div>
  )
}

export default App